#!/bin/bash
# Tiny bash script to run very simple tests. Fun fact: I don't know Bash at all XD

NAME='sest'
VERSION='0.4.0'

NL=$'\n'
RUNNER_PYTHON='python3'

file='tests.txt'
case_delim='==='
input_delim='---'
runner=


function split_str {
	local -n out=$1; out=()
	local text=$2
	local delim=$3
	local string=$text$delim

	# https://linuxhint.com/bash_split_examples
	while [ "$string" ]; do
		out+=("${string%%"$delim"*}")
		string=${string#*"$delim"}
	done
}

function print_help_and_exit {
	cat <<- EOM
	$NAME - Risko's minimal testing utility for competitive(?) programming

	Usage: $NAME [OPTIONS...] ARGS...

	Available options:
	  -h, --help                          Show this help text
	  --version                           Show version
	  -r, --runner=RUNNER                 Interpreter to run the tests with
	  -f, --file=FILE                     Read tests from FILE instead of ./$file
	  -D, --case-delimiter=CASE_DELIM     Use CASE_DELIM instead of '$case_delim' for separating cases
	  -d, --delimiter=DELIM               Use DELIM instead of '$input_delim' for separating input/output
	
	Runners:                         Extensions:              What they do:
	  py, python, python3              .py, .py3                Python ($RUNNER_PYTHON)

	Reads tests from FILE; calls the RUNNER with the given ARGS and test input
	as stdin; verifies outputs. If no RUNNER is specified, it is guessed from
	the extension of the first argument.

	FILE should be a normal text file. Cases are separated from each other by
	CASE_DELIM, and the input/output of each case is separated by DELIM.
	Newlines following delimiters are ignored.
	EOM
	exit
}

function print_version_and_exit {
	echo $VERSION
	exit
}


# Parse arguments (https://stackoverflow.com/a/14203146)
positional_args=()

for i in "$@"; do
	case $i in
	-h|--help)
		print_help_and_exit
		;;
	--version)
		print_version_and_exit
		;;
	-r=*|--runner=*)
		runner="${i#**=}"
		case $runner in
			py|python|python3)
				runner=$RUNNER_PYTHON
				;;
			*)
				echo "$NAME: unknown runner '$runner'"
				exit 1
				;;
		esac
		;;
	-f=*|--file=*)
		file="${i#*=}"
		;;
	-D=*|--case-delimiter=*)
		case_delim="${i#*=}"
		;;
	-d=*|--delimiter=*)
		input_delim="${i#*=}"
		;;
	--* | -*)
		echo "$NAME: unknown option '$i'"
		exit 1
		;;
	*)
		positional_args+=("$i")
		;;
	esac
done

set -- "${positional_args[@]}" # Restore positional parameters


# Guess runner
if [ -z $runner ]; then
	# https://stackoverflow.com/a/965072
	base=$(basename -- "$1") 
	ext="${base##*.}"

	case $ext in
		py|py3)
			runner=$RUNNER_PYTHON
			;;
		*)
			echo "$NAME: unknown extension '$ext' - specify a runner manually"
			exit 1
			;;
	esac
fi

# Verify runner
echo "Choosing runner '$runner'"

if [ -z "$(command -v $runner)" ]; then
	echo "$NAME: runner '$runner' was not found; verify that it is installed"
	exit 1
fi

# Make sure cases file exists
if ! [ -f "$file" ]; then
	echo "$NAME: '$file' is not a file"
	exit 1
fi

# Read + split input file
raw=$(cat "$file" && echo '.')
raw=${raw%.} # https://unix.stackexchange.com/a/10804
declare cases; split_str cases "$raw" "$case_delim$NL"

# Run tests
case_num=1
for case in "${cases[@]}"; do
	declare parts; split_str parts "$case" "$input_delim$NL"

	# Check case is formatted correctly
	num_parts=${#parts[@]}
	if [ "$num_parts" != 2 ]; then
		printf "$NAME: case %d is split up into %d section(s), but exactly 2 are expected\n" "$case_num" "$num_parts"
		exit 1
	fi

	input=${parts[0]}
	expected=${parts[1]}

	# Run runner
	if actual=$($runner "$@" <<< "$input" && echo '.'); then 
		actual=${actual%.} 
	else
		printf "Case %d: Runtime error! See above for trace.\nOutput (%d):\n%s\n" "$case_num" ${#actual} "$actual"
		exit 1
	fi

	# Check equality
	if [ "$actual" = "$expected" ]; then
		echo "Case $case_num: OK"
	else
		printf "Case %d: Wrong output!\n\nExpected (%d):\n%s\nGot (%d):\n%s\n" \
			"$case_num" ${#expected} "$expected" ${#actual} "$actual"
	fi

	((case_num++))
done

echo "DONE"