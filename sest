#!/bin/bash
# Tiny bash script to run very simple tests. Fun fact: I don't know Bash at all XD

NAME='sest'
VERSION='0.5.2'

NL=$'\n'
RUNNER_PYTHON='python3'
FAIL_CODE=64

file='tests.txt'
case_delim='==='
input_delim='---'
runner=
requested_case=
fail_fast=false
print_output=true
color=auto


function split_str {
	local -n out=$1; out=()
	local text=$2
	local delim=$3
	local string=$text$delim

	# https://linuxhint.com/bash_split_examples
	while [ "$string" ]; do
		out+=("${string%%"$delim"*}")
		string=${string#*"$delim"}
	done
}

function print_help_and_exit {
	cat <<- EOM
$NAME - Risko's minimal testing utility for competitive(?) programming

Usage: $NAME [OPTIONS...] ARGS...

Available options:
  -h, --help                         Show this help text
      --version                      Show version
  -r, --runner=RUNNER                Interpreter to run the tests with
  -f, --file=FILE                    Read tests from FILE instead of ./$file
  -D, --case-delimiter=CASE_DELIM    Use CASE_DELIM instead of '$case_delim' for
                                       separating cases
  -d, --delimiter=DELIM              Use DELIM instead of '$input_delim' for separating
                                       input/output
  -c, --case=CASE_NUM                Run only one specific test case
  -F, --fast                         Exit immediately on the first test failure
  -o, --overview                     Do not print actual or expected test output
      --color=WHEN                   WHEN is 'auto' (def), 'always' or 'never'

Available runners:              Their extensions:         What they are:
  py, python, python3             .py, .py3                 Python ($RUNNER_PYTHON)

Reads tests from FILE; calls the RUNNER with the given ARGS and test input as
stdin; verifies outputs. If no RUNNER is specified, it is guessed from the
extension of the first argument.

FILE should be a normal text file. Cases are separated from each other by
CASE_DELIM, and the input/output of each case is separated by DELIM. Newlines
following delimiters are ignored.

Exits with a special error code of $FAIL_CODE if any tests fail.
EOM
	exit
}

function print_version_and_exit {
	echo $VERSION
	exit
}


# Parse arguments (https://stackoverflow.com/a/14203146)
positional_args=()

for i in "$@"; do
	case $i in
	-h|--help)
		print_help_and_exit
		;;
	--version)
		print_version_and_exit
		;;
	-r=*|--runner=*)
		runner="${i#*=}"
		case $runner in
			py|python|python3)
				runner=$RUNNER_PYTHON
				;;
			*)
				echo >&2 "$NAME: unknown runner '$runner'"
				exit 1
				;;
		esac
		;;
	-f=*|--file=*)
		file="${i#*=}"
		;;
	-D=*|--case-delimiter=*)
		case_delim="${i#*=}"
		;;
	-d=*|--delimiter=*)
		input_delim="${i#*=}"
		;;
	-c=*|--case=*)
		requested_case="${i#*=}"
		;;
	-F|--fast)
		fail_fast=true
		;;
	-o|--overview)
		print_output=false
		;;
	--color=*)
	    color="${i#*=}"
		;;
	--* | -*)
		echo >&2 "$NAME: unknown option '$i'"
		exit 1
		;;
	*)
		positional_args+=("$i")
		;;
	esac
done

set -- "${positional_args[@]}" # Restore positional parameters


# Verify that we have been passed positional arguments
if [ $# = 0 ]; then
	echo >&2 "$NAME: at least one positional argument is required"
	exit 1
fi

# Set up colors (https://unix.stackexchange.com/a/10065)
# If colors are not requested, the color variables will be empty strings and
# we can still print them safely.
if [ "$color" = always ] || { [ "$color" = auto ] && [ -t 1 ]; }; then
    num_of_colors=$(tput colors)

    if [ "$num_of_colors" ] && [ "$num_of_colors" -ge 8 ]; then # Check if colors are supported
        normal="$(tput sgr0)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        blue="$(tput setaf 4)" # 6 is cyan which is lighter and may be more pleasing
	fi
fi

# Guess runner
if [ -z $runner ]; then
	# https://stackoverflow.com/a/965072
	base=$(basename -- "$1")
	namebody=${base#.} # Don't use leading period for checking if there are periods
	if [ "$namebody" = "${namebody/./}"  ]; then # Check if contains periods by removing and comparing
		echo >&2 "$NAME: no extension present - specify a runner manually"
		exit 1
	else
		ext="${base##*.}"
	fi

	case $ext in
		py|py3)
			runner=$RUNNER_PYTHON
			;;
		*)
			echo >&2 "$NAME: unknown extension '$ext' - specify a runner manually"
			exit 1
			;;
	esac
fi

# Verify runner
echo "${blue}Using runner '$runner'$normal"

if [ -z "$(command -v $runner)" ]; then
	echo >&2 "$NAME: runner '$runner' was not found; verify that it is installed"
	exit 1
fi

# Make sure cases file exists
if ! [ -f "$file" ]; then
	echo >&2 "$NAME: '$file' is not a file"
	exit 1
fi

# Read + split input file
raw=$(cat "$file" && echo '.')
raw=${raw%.} # https://unix.stackexchange.com/a/10804
declare cases; split_str cases "$raw" "$case_delim$NL"

# Run tests
failed=false
case_num=0
for case in "${cases[@]}"; do
	((case_num++))

	# Check for a requested case
	if [ "$requested_case" ] && [ "$case_num" != "$requested_case" ]; then
		continue
	fi

	# Split case
	declare parts; split_str parts "$case" "$input_delim$NL"

	# Check case is formatted correctly
	num_parts=${#parts[@]}
	if [ "$num_parts" != 2 ]; then
		echo >&2 "$NAME: case $case_num is split up into $num_parts section(s), but exactly 2 are expected"
		exit 1
	fi

	input=${parts[0]}
	expected=${parts[1]}

	# Run runner
	if actual=$($runner "$@" <<< "$input" 2>&1 && echo '.'); then 
		actual=${actual%.} 
	else
		echo "${red}Case $case_num: Runtime error!$normal"

		if $print_output; then
			printf "${blue}Output (%d):$normal\n%s\n" ${#actual} "$actual"
		fi
		
		failed=true
		if $fail_fast; then break; else continue; fi
	fi

	# Check equality
	if [ "$actual" = "$expected" ]; then
		echo "${green}Case $case_num: OK$normal"
	else
		echo "${red}Case $case_num: Wrong output!$normal"

		if $print_output; then
			printf "${blue}Expected (%d):$normal\n%s\n${blue}Got (%d):$normal\n%s\n" \
				${#expected} "$expected" ${#actual} "$actual"
		fi

		failed=true
		if $fail_fast; then break; else continue; fi
	fi
done

echo "${blue}DONE$normal"

if $failed; then
	exit $FAIL_CODE
else
	exit 0
fi
